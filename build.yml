parameters:
- name: 'Build.Target'
  type: string
- name: Major
  type: number
  default: 1
- name: Minor
  type: number
  default: 0

jobs:
- job: Build
  pool:
    vmImage: 'windows-latest'
  variables:
    VersionBuild: 0
    VersionRevision: 0
  steps:
    - powershell: |
        $build = ('{0:yy}{1:000}' -f [datetime]::Today, [datetime]::Today.DayOfYear)
        Write-Host "##vso[task.setvariable variable=VersionBuild;]$build"
        $revision = [int](([datetime]::Now - [datetime]::Today).TotalSeconds / 1.4)
        Write-Host "##vso[task.setvariable variable=VersionRevision;]$revision"
        Write-Host 'Build='$build'|Revision='$revision
        Write-Host "##vso[build.updatebuildnumber]${{ parameters.Major }}.${{ parameters.Minor }}.$(VersionBuild).$(VersionRevision)"
        Write-Host '$(Build.Target)'
      displayName: Calculate Build and Revision part
    - task: DownloadSecureFile@1
      name: privateKey
      displayName: GetPrivateKey
      inputs:
        secureFile: 'be.stateless.snk'

    - task: DotNetCoreCLI@2
      displayName: Restore
      inputs:
        command: 'restore'
        projects: '$(Build.Target)'
        feedsToUse: 'select'
        vstsFeed: '1b04fa51-ab33-4e2a-9966-fc900bcff434'
        includeNuGetOrg: true

    - task: DotNetCoreCLI@2
      displayName: dotnet build (Debug)
      inputs:
        command: 'build'
        projects: '$(Build.Target)'
        arguments: '-p:Configuration=Debug;Major=${{ parameters.Major }};Minor=${{ parameters.Minor }};Build=$(VersionBuild);Revision=$(VersionRevision);DelaySign=false;AssemblyOriginatorKeyFile=$(privateKey.secureFilePath);GeneratePackageOnBuild=false --no-restore'

    - task: DotNetCoreCLI@2
      displayName: dotnet build (Release)
      inputs:
        command: 'build'
        projects: '$(Build.Target)'
        arguments: '-p:Configuration=Release;Major=${{ parameters.Major }};Minor=${{ parameters.Minor }};Build=$(VersionBuild);Revision=$(VersionRevision);DelaySign=false;AssemblyOriginatorKeyFile=$(privateKey.secureFilePath);GeneratePackageOnBuild=true --no-restore'

    - task: ResharperCli@2
      displayName: ReSharper Code Analysis
      inputs:
        solutionOrProjectPath: '$(Build.Target)'
        failBuildLevelSelector: 'Warning'
        arguments: '--configuration Release'
        resultsOutputFilePath: '$(Build.SourcesDirectory)/CodeAnalysisReport'

    # Run all tests with "/p:CollectCoverage=true /p:CoverletOutputFormat=cobertura" to generate the code coverage file
    - task: DotNetCoreCLI@2
      displayName: dotnet test (Release)
      inputs:
        command: test
        arguments: '--configuration Release /p:CollectCoverage=true /p:CoverletOutputFormat=cobertura /p:CoverletOutput=$(Build.SourcesDirectory)/tests/'
        projects: '**/*.Tests.csproj'
        nobuild: true

    # Generate the report using ReportGenerator (https://github.com/danielpalme/ReportGenerator)
    # First install the tool on the machine, then run it
    - script: |
        dotnet tool install -g dotnet-reportgenerator-globaltool
        reportgenerator -reports:$(Build.SourcesDirectory)/tests/**/coverage*.cobertura.xml -targetdir:$(Build.SourcesDirectory)/CodeCoverage -reporttypes:HtmlInline_AzurePipelines;Cobertura
      displayName: Create Code coverage report

    # Publish the code coverage result (summary and web site)
    # The summary allows to view the coverage percentage in the summary tab
    # The web site allows to view which lines are covered directly in Azure Pipeline
    - task: PublishCodeCoverageResults@1
      displayName: 'Publish code coverage'
      inputs:
        codeCoverageTool: Cobertura
        summaryFileLocation: '$(Build.SourcesDirectory)/CodeCoverage/Cobertura.xml'
        reportDirectory: '$(Build.SourcesDirectory)/CodeCoverage'

    - task: CopyFiles@2
      inputs:
        name: Prepare artifact
        SourceFolder: '$(agent.builddirectory)'
        Contents: '**\*.*nupkg'
        flattenFolders: true
        TargetFolder: '$(build.artifactstagingdirectory)'
        CleanTargetFolder: true
        OverWrite: true

    - task: PublishBuildArtifacts@1
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)'
        ArtifactName: 'packages'
        publishLocation: 'Container'
