parameters:
- name: 'ProjectOrSolutionPath'
  type: string
- name: Major
  type: number
  default: 1
- name: Minor
  type: number
  default: 0
- name: BuildRelease
  type: boolean
  default: true

stages:
- stage: build
  jobs:
  - job: build
    pool:
      vmImage: 'windows-latest'
    variables:
      VersionBuild: 0
      VersionRevision: 0
    steps:
      - powershell: |
          $build = ('{0:yy}{1:000}' -f [datetime]::Today, [datetime]::Today.DayOfYear)
          Write-Host "##vso[task.setvariable variable=VersionBuild;]$build"
          $revision = [int](([datetime]::Now - [datetime]::Today).TotalSeconds / 1.4)
          Write-Host "##vso[task.setvariable variable=VersionRevision;]$revision"
          Write-Host 'Build='$build'|Revision='$revision
          Write-Host "##vso[build.updatebuildnumber]${{ parameters.Major }}.${{ parameters.Minor }}.$build.$revision"
        displayName: calculate build and revision part

      - task: DownloadSecureFile@1
        name: privateKey
        displayName: get private key
        inputs:
          secureFile: 'be.stateless.snk'

      - task: DotNetCoreCLI@2
        displayName: dotnet restore
        inputs:
          command: 'restore'
          projects: '${{ parameters.ProjectOrSolutionPath }}'
          feedsToUse: 'select'
          vstsFeed: '1b04fa51-ab33-4e2a-9966-fc900bcff434'
          includeNuGetOrg: true

      - task: DotNetCoreCLI@2
        displayName: dotnet build (Debug)
        inputs:
          command: 'build'
          projects: '${{ parameters.ProjectOrSolutionPath }}'
          arguments: '-p:Configuration=Debug;Major=${{ parameters.Major }};Minor=${{ parameters.Minor }};Build=$(VersionBuild);Revision=$(VersionRevision);AssemblyOriginatorKeyFile=$(privateKey.secureFilePath);GeneratePackageOnBuild=false --no-restore'

      - task: DotNetCoreCLI@2
        displayName: dotnet build (Release)
        condition: eq('${{ parameters.BuildRelease }}', true)
        inputs:
          command: 'build'
          projects: '${{ parameters.ProjectOrSolutionPath }}'
          arguments: '-p:Configuration=Release;Major=${{ parameters.Major }};Minor=${{ parameters.Minor }};Build=$(VersionBuild);Revision=$(VersionRevision);AssemblyOriginatorKeyFile=$(privateKey.secureFilePath);GeneratePackageOnBuild=false --no-restore'

      - task: ResharperCli@2
        displayName: analyze code with Resharpar
        inputs:
          solutionOrProjectPath: '${{ parameters.ProjectOrSolutionPath }}'
          failBuildLevelSelector: 'Warning'
          arguments: '--configuration Release'
          resultsOutputFilePath: '$(Build.SourcesDirectory)/CodeAnalysisReport'

      # Generate the report using ReportGenerator (https://github.com/danielpalme/ReportGenerator)
      # First install the tool on the machine, then run it
      - script: |
          dotnet tool install -g dotnet-reportgenerator-globaltool
          reportgenerator -reports:$(Build.SourcesDirectory)/tests/**/coverage*.cobertura.xml -targetdir:$(Build.SourcesDirectory)/CodeCoverage -reporttypes:HtmlInline_AzurePipelines;Cobertura
        displayName: create code coverage report

      # Publish the code coverage result (summary and web site)
      # The summary allows to view the coverage percentage in the summary tab
      # The web site allows to view which lines are covered directly in Azure Pipeline
      - task: PublishCodeCoverageResults@1
        displayName: 'publish code coverage'
        inputs:
          codeCoverageTool: Cobertura
          summaryFileLocation: '$(Build.SourcesDirectory)/CodeCoverage/Cobertura.xml'
          reportDirectory: '$(Build.SourcesDirectory)/CodeCoverage'

      - task: DotNetCoreCLI@2
        displayName: dotnet pack (Release)
        condition: eq('${{ parameters.BuildRelease }}', true)
        inputs:
          command: pack
          arguments: '--configuration Release --no-build'
          projects: '${{ parameters.BuildTarget }}'
          packDirectory: '$(build.artifactstagingdirectory)'
          nobuild: true

      - task: PublishBuildArtifacts@1
        displayName: publish artifacts
        condition: eq('${{ parameters.BuildRelease }}', true)
        inputs:
          PathtoPublish: '$(Build.ArtifactStagingDirectory)'
          ArtifactName: 'packages'
          publishLocation: 'Container'